from instructions import *
from config import *

def generateSource(module, config):
    generatedCode = f"""--!optimize 2
--!nolint
--!nocheck
--!native
--# selene: allow(global_usage, multiple_statements, incorrect_standard_library_use, unused_variable)

-- Generated by roblox-llvm {VERSION}\n"""

    if config.strictOverflowMode:
        generatedCode += """
function llvm_overload_clamp(target, range, decimal)
    local x = math.clamp(target, -range, range)
    if decimal == 1 then math.floor(x) end
    return if x == range then -range else x
end"""
    if not config.customBit32:
        generatedCode += """
local lshift = bit32.lshift
local rshift = bit32.rshift
local arshift = bit32.arshift
local band = bit32.band
local bor = bit32.bor
local bxor = bit32.bxor\n"""
    else:
        generatedCode += """
local lshift = _G.llvm_lshift or error("roblox-llvm | function 'lshift' not found (disable -cbit flag to use the default implementation)")
local rshift = _G.llvm_rshift or error("roblox-llvm | function 'rshift' not found (disable -cbit flag to use the default implementation)")
local arshift = _G.llvm_arshift or error("roblox-llvm | function 'arshift' not found (disable -cbit flag to use the default implementation)")
local band = _G.llvm_band or error("roblox-llvm | function 'band' not found (disable -cbit flag to use the default implementation)")
local bor = _G.llvm_bor or error("roblox-llvm | function 'bor' not found (disable -cbit flag to use the default implementation)")
local bxor = _G.llvm_bxor or error("roblox-llvm | function 'bxor' not found (disable -cbit flag to use the default implementation)")\n"""

    if config.customBuffer:
        generatedCode += """
local buffer = _G.llvm_buffer or error("roblox-llvm | function 'buffer' not found (disable -cbit flag to use the default implementation)")
"""
    for var in module.global_variables:
        generatedCode += f"\nlocal {var.name.replace('.', '_')} = {valueResolver(var)[0]}"
    for func in module.functions:
        if func.is_declaration:
            generatedCode += "\nif not " + func.name + " then " + func.name + " = _G.llvm_" + func.name + " or error(\"roblox-llvm | function '" + func.name + "' not found\") end"
        else:
            generatedCode += "\nfunction " + func.name + "(" + ", ".join([valueResolver(arg)[0] for arg in func.arguments]) + ")"
            for block in func.blocks:
                for instruction in block.instructions:
                    generatedCode += "\n    " + instructions.getinst(instruction.opcode)(instruction, config)
            generatedCode += "\nend"
    
    generatedCode += """

return {"""+", ".join([func.name.replace('.','_') for func in module.functions if not func.is_declaration]) +", "+ ", ".join([var.name.replace('.','_') for var in module.global_variables if not var.is_declaration]) + "}\n"""
    return (generatedCode)
